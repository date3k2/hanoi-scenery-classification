Files already downloaded and verified
Files already downloaded and verified
Help on method log in module wandb.sdk.wandb_run:
log(data: Dict[str, Any], step: Optional[int] = None, commit: Optional[bool] = None, sync: Optional[bool] = None) -> None method of wandb.sdk.wandb_run.Run instance
    Log a dictionary of data to the current run's history.
    Use `wandb.log` to log data from runs, such as scalars, images, video,
    histograms, plots, and tables.
    See our [guides to logging](https://docs.wandb.ai/guides/track/log) for
    live examples, code snippets, best practices, and more.
    The most basic usage is `wandb.log({"train-loss": 0.5, "accuracy": 0.9})`.
    This will save the loss and accuracy to the run's history and update
    the summary values for these metrics.
    Visualize logged data in the workspace at [wandb.ai](https://wandb.ai),
    or locally on a [self-hosted instance](https://docs.wandb.ai/guides/hosting)
    of the W&B app, or export data to visualize and explore locally, e.g. in
    Jupyter notebooks, with [our API](https://docs.wandb.ai/guides/track/public-api-guide).
    In the UI, summary values show up in the run table to compare single values across runs.
    Summary values can also be set directly with `wandb.run.summary["key"] = value`.
    Logged values don't have to be scalars. Logging any wandb object is supported.
    For example `wandb.log({"example": wandb.Image("myimage.jpg")})` will log an
    example image which will be displayed nicely in the W&B UI.
    See the [reference documentation](https://docs.wandb.com/ref/python/data-types)
    for all of the different supported types or check out our
    [guides to logging](https://docs.wandb.ai/guides/track/log) for examples,
    from 3D molecular structures and segmentation masks to PR curves and histograms.
    `wandb.Table`s can be used to logged structured data. See our
    [guide to logging tables](https://docs.wandb.ai/guides/data-vis/log-tables)
    for details.
    Logging nested metrics is encouraged and is supported in the W&B UI.
    If you log with a nested dictionary like `wandb.log({"train":
    {"acc": 0.9}, "val": {"acc": 0.8}})`, the metrics will be organized into
    `train` and `val` sections in the W&B UI.
    wandb keeps track of a global step, which by default increments with each
    call to `wandb.log`, so logging related metrics together is encouraged.
    If it's inconvenient to log related metrics together
    calling `wandb.log({"train-loss": 0.5}, commit=False)` and then
    `wandb.log({"accuracy": 0.9})` is equivalent to calling
    `wandb.log({"train-loss": 0.5, "accuracy": 0.9})`.
    `wandb.log` is not intended to be called more than a few times per second.
    If you want to log more frequently than that it's better to aggregate
    the data on the client side or you may get degraded performance.
    Arguments:
        data: (dict, optional) A dict of serializable python objects i.e `str`,
            `ints`, `floats`, `Tensors`, `dicts`, or any of the `wandb.data_types`.
        commit: (boolean, optional) Save the metrics dict to the wandb server
            and increment the step.  If false `wandb.log` just updates the current
            metrics dict with the data argument and metrics won't be saved until
            `wandb.log` is called with `commit=True`.
        step: (integer, optional) The global step in processing. This persists
            any non-committed earlier steps but defaults to not committing the
            specified step.
        sync: (boolean, True) This argument is deprecated and currently doesn't
            change the behaviour of `wandb.log`.
    Examples:
        For more and more detailed examples, see
        [our guides to logging](https://docs.wandb.com/guides/track/log).
        ### Basic usage
        <!--yeadoc-test:init-and-log-basic-->
        ```python
        import wandb
        run = wandb.init()
        run.log({"accuracy": 0.9, "epoch": 5})
        ```
        ### Incremental logging
        <!--yeadoc-test:init-and-log-incremental-->
        ```python
        import wandb
        run = wandb.init()
        run.log({"loss": 0.2}, commit=False)
        # Somewhere else when I'm ready to report this step:
        run.log({"accuracy": 0.8})
        ```
        ### Histogram
        <!--yeadoc-test:init-and-log-histogram-->
        ```python
        import numpy as np
        import wandb
        # sample gradients at random from normal distribution
        gradients = np.random.randn(100, 100)
        run = wandb.init()
        run.log({"gradients": wandb.Histogram(gradients)})
        ```
        ### Image from numpy
        <!--yeadoc-test:init-and-log-image-numpy-->
        ```python
        import numpy as np
        import wandb
        run = wandb.init()
        examples = []
        for i in range(3):
            pixels = np.random.randint(low=0, high=256, size=(100, 100, 3))
            image = wandb.Image(pixels, caption=f"random field {i}")
            examples.append(image)
        run.log({"examples": examples})
        ```
        ### Image from PIL
        <!--yeadoc-test:init-and-log-image-pillow-->
        ```python
        import numpy as np
        from PIL import Image as PILImage
        import wandb
        run = wandb.init()
        examples = []
        for i in range(3):
            pixels = np.random.randint(low=0, high=256, size=(100, 100, 3), dtype=np.uint8)
            pil_image = PILImage.fromarray(pixels, mode="RGB")
            image = wandb.Image(pil_image, caption=f"random field {i}")
            examples.append(image)
        run.log({"examples": examples})
        ```
        ### Video from numpy
        <!--yeadoc-test:init-and-log-video-numpy-->
        ```python
        import numpy as np
        import wandb
        run = wandb.init()
        # axes are (time, channel, height, width)
        frames = np.random.randint(low=0, high=256, size=(10, 3, 100, 100), dtype=np.uint8)
        run.log({"video": wandb.Video(frames, fps=4)})
        ```
        ### Matplotlib Plot
        <!--yeadoc-test:init-and-log-matplotlib-->
        ```python
        from matplotlib import pyplot as plt
        import numpy as np
        import wandb
        run = wandb.init()
        fig, ax = plt.subplots()
        x = np.linspace(0, 10)
        y = x * x
        ax.plot(x, y)  # plot y = x^2
        run.log({"chart": fig})
        ```
        ### PR Curve
        ```python
        import wandb
        run = wandb.init()
        run.log({"pr": wandb.plots.precision_recall(y_test, y_probas, labels)})
        ```
        ### 3D Object
        ```python
        import wandb
        run = wandb.init()
        run.log(
            {
                "generated_samples": [
                    wandb.Object3D(open("sample.obj")),
                    wandb.Object3D(open("sample.gltf")),
                    wandb.Object3D(open("sample.glb")),
                ]
            }
        )
        ```
    Raises:
        wandb.Error: if called before `wandb.init`
        ValueError: if invalid data is passed
0 tensor([[[[-0.7479, -0.7822, -0.8164,  ..., -1.7240, -1.7069, -1.6898],
          [-0.7822, -0.8164, -0.8507,  ..., -1.7412, -1.7240, -1.7069],
          [-0.7993, -0.8507, -0.8849,  ..., -1.7412, -1.7240, -1.7240],
          ...,
          [-1.0904, -1.0733, -1.0562,  ..., -1.0904, -1.1075, -1.1247],
          [-1.0904, -1.0733, -1.0562,  ..., -1.1075, -1.1247, -1.1418],
          [-1.0904, -1.0733, -1.0562,  ..., -1.1418, -1.1589, -1.1760]],
         [[-0.7227, -0.7752, -0.8102,  ..., -1.7206, -1.7031, -1.6856],
          [-0.7577, -0.8102, -0.8627,  ..., -1.7206, -1.7031, -1.6856],
          [-0.8102, -0.8627, -0.8978,  ..., -1.7206, -1.7031, -1.6856],
          ...,
          [-0.9853, -0.9678, -0.9678,  ..., -1.0028, -1.0378, -1.0553],
          [-0.9678, -0.9678, -0.9503,  ..., -1.0203, -1.0553, -1.0728],
          [-0.9503, -0.9503, -0.9328,  ..., -1.0378, -1.0553, -1.0728]],
         [[-1.0376, -1.0550, -1.0550,  ..., -1.6650, -1.6824, -1.6824],
          [-1.1247, -1.1421, -1.1421,  ..., -1.6650, -1.6824, -1.6999],
          [-1.2119, -1.2293, -1.2293,  ..., -1.6824, -1.6999, -1.7173],
          ...,
          [-1.5430, -1.5604, -1.5604,  ..., -1.5604, -1.5604, -1.5604],
          [-1.5430, -1.5604, -1.5604,  ..., -1.5604, -1.5604, -1.5604],
          [-1.5256, -1.5430, -1.5430,  ..., -1.5604, -1.5604, -1.5604]]],
        [[[ 0.0569,  0.0569,  0.0569,  ..., -0.1999, -0.1999, -0.1999],
          [ 0.0569,  0.0569,  0.0569,  ..., -0.1999, -0.1999, -0.2171],
          [ 0.0569,  0.0569,  0.0569,  ..., -0.2171, -0.2171, -0.2171],
          ...,
          [-0.1657, -0.1486, -0.1486,  ..., -0.5082, -0.4911, -0.4911],
          [-0.1486, -0.1486, -0.1486,  ..., -0.5082, -0.5082, -0.5082],
          [-0.1314, -0.1314, -0.1314,  ..., -0.5253, -0.5253, -0.5253]],
         [[ 0.6429,  0.6429,  0.6429,  ...,  0.3978,  0.3978,  0.3978],
          [ 0.6429,  0.6429,  0.6429,  ...,  0.3803,  0.3803,  0.3803],
          [ 0.6429,  0.6429,  0.6429,  ...,  0.3803,  0.3803,  0.3803],
          ...,
          [ 0.4678,  0.4853,  0.4853,  ...,  0.4328,  0.4328,  0.4328],
          [ 0.4678,  0.4853,  0.4853,  ...,  0.4328,  0.4328,  0.4328],
          [ 0.4853,  0.5028,  0.5028,  ...,  0.4153,  0.4153,  0.4153]],
         [[ 1.0714,  1.0714,  1.0714,  ...,  0.8971,  0.8971,  0.8797],
          [ 1.0888,  1.0888,  1.0888,  ...,  0.8797,  0.8797,  0.8622],
          [ 1.0888,  1.0888,  1.0888,  ...,  0.8622,  0.8622,  0.8448],
          ...,
          [ 0.4962,  0.4788,  0.4439,  ...,  0.2522,  0.2522,  0.2522],
          [ 0.5136,  0.4788,  0.4614,  ...,  0.2348,  0.2348,  0.2348],
          [ 0.5311,  0.4962,  0.4614,  ...,  0.2173,  0.2348,  0.2348]]],
        [[[ 0.5022,  0.3823,  0.2796,  ..., -1.5870, -1.5870, -1.5699],
          [ 0.5364,  0.4166,  0.2967,  ..., -1.5870, -1.5870, -1.5870],
          [ 0.5536,  0.4337,  0.3309,  ..., -1.5870, -1.5870, -1.5870],
          ...,
          [-0.2171, -0.1999, -0.1999,  ...,  1.6324,  1.6324,  1.6324],
          [-0.2171, -0.1999, -0.1828,  ...,  1.6324,  1.6324,  1.6324],
          [-0.1999, -0.1828, -0.1657,  ...,  1.6324,  1.6324,  1.6324]],
         [[ 0.7829,  0.6604,  0.5553,  ..., -1.3880, -1.3704, -1.3529],
          [ 0.8004,  0.6954,  0.5903,  ..., -1.4055, -1.3880, -1.3704],
          [ 0.8354,  0.7304,  0.6078,  ..., -1.4055, -1.3880, -1.3880],
          ...,
          [-0.1275, -0.1275, -0.1275,  ...,  1.4482,  1.4307,  1.4132],
          [-0.1275, -0.1275, -0.1275,  ...,  1.4482,  1.4307,  1.4132],
          [-0.1275, -0.1275, -0.1099,  ...,  1.4482,  1.4307,  1.4132]],
         [[ 0.9668,  0.8448,  0.7228,  ..., -1.0898, -1.0724, -1.0550],
          [ 1.0017,  0.8797,  0.7576,  ..., -1.1073, -1.0898, -1.0724],
          [ 1.0365,  0.9145,  0.7925,  ..., -1.1073, -1.0898, -1.0898],
          ...,
          [-0.0441, -0.0441, -0.0441,  ...,  1.1062,  1.0888,  1.0888],
          [-0.0441, -0.0441, -0.0441,  ...,  1.1062,  1.0888,  1.0888],
          [-0.0441, -0.0267, -0.0267,  ...,  1.1062,  1.0888,  1.0714]]],
        ...,
        [[[ 0.0227,  0.0398,  0.0741,  ...,  1.7865,  1.7523,  1.7352],
          [ 0.0398,  0.0569,  0.0912,  ...,  1.8379,  1.8037,  1.7865],
          [ 0.0569,  0.0741,  0.0912,  ...,  1.8722,  1.8550,  1.8379],
          ...,
          [-0.7137, -0.6623, -0.6281,  ..., -0.4739, -0.4739, -0.4739],
          [-0.6965, -0.6623, -0.6109,  ..., -0.4739, -0.4739, -0.4739],
          [-0.6794, -0.6452, -0.5938,  ..., -0.4739, -0.4739, -0.4739]],
         [[ 1.1155,  1.1506,  1.1681,  ...,  2.2535,  2.2360,  2.2185],
          [ 1.1155,  1.1506,  1.1681,  ...,  2.2710,  2.2360,  2.2360],
          [ 1.1155,  1.1506,  1.1681,  ...,  2.2710,  2.2535,  2.2360],
          ...,
          [ 0.0476,  0.0826,  0.1176,  ...,  0.4678,  0.4853,  0.4853],
          [ 0.0476,  0.0826,  0.1176,  ...,  0.4678,  0.4678,  0.4678],
          [ 0.0651,  0.1001,  0.1352,  ...,  0.4503,  0.4503,  0.4678]],
         [[ 0.1825,  0.1999,  0.2348,  ...,  2.2391,  2.2217,  2.1868],
          [ 0.1825,  0.1999,  0.2348,  ...,  2.2740,  2.2566,  2.2217],
          [ 0.1825,  0.1999,  0.2348,  ...,  2.3088,  2.2914,  2.2740],
          ...,
          [-0.5147, -0.4798, -0.4624,  ..., -0.1661, -0.1661, -0.1487],
          [-0.5147, -0.4798, -0.4624,  ..., -0.1835, -0.1835, -0.1661],
          [-0.5147, -0.4798, -0.4624,  ..., -0.2010, -0.2010, -0.1835]]],
        [[[-1.2103, -1.1932, -1.1932,  ...,  0.7077,  0.7248,  0.7419],
          [-1.2103, -1.1932, -1.1932,  ...,  0.7077,  0.7419,  0.7591],
          [-1.2103, -1.1932, -1.1932,  ...,  0.7248,  0.7419,  0.7591],
          ...,
          [-1.0733, -1.0562, -1.0562,  ...,  1.6838,  1.6838,  1.6667],
          [-1.0390, -1.0390, -1.0390,  ...,  1.6667,  1.6667,  1.6667],
          [-1.0219, -1.0219, -1.0219,  ...,  1.6495,  1.6667,  1.6495]],
         [[-1.0378, -1.0203, -1.0203,  ...,  0.9755,  0.9755,  0.9930],
          [-1.0378, -1.0203, -1.0203,  ...,  0.9755,  0.9930,  1.0105],
          [-1.0378, -1.0203, -1.0203,  ...,  0.9930,  1.0105,  1.0280],
          ...,
          [-0.8978, -0.8803, -0.8803,  ...,  1.9209,  1.9209,  1.9034],
          [-0.8627, -0.8627, -0.8627,  ...,  1.9034,  1.9034,  1.9034],
          [-0.8452, -0.8452, -0.8452,  ...,  1.8859,  1.9034,  1.8859]],
         [[-0.8284, -0.8110, -0.8110,  ...,  0.8971,  0.9145,  0.9494],
          [-0.8284, -0.8110, -0.8110,  ...,  0.8971,  0.9319,  0.9668],
          [-0.8284, -0.8110, -0.8110,  ...,  0.9145,  0.9494,  0.9842],
          ...,
          [-0.6890, -0.6715, -0.6715,  ...,  2.1171,  2.1171,  2.0997],
          [-0.6541, -0.6541, -0.6541,  ...,  2.0997,  2.0997,  2.0997],
          [-0.6367, -0.6367, -0.6367,  ...,  2.0823,  2.0997,  2.0823]]],
        [[[-1.1075, -1.1075, -1.1075,  ..., -0.2684, -0.3027, -0.3198],
          [-1.0390, -1.0219, -1.0219,  ..., -0.3027, -0.3369, -0.3541],
          [-0.9705, -0.9705, -0.9705,  ..., -0.3369, -0.3712, -0.4054],
          ...,
          [-1.1932, -1.1760, -1.1589,  ..., -1.6213, -1.6384, -1.6555],
          [-1.1760, -1.1589, -1.1418,  ..., -1.5357, -1.5528, -1.5699],
          [-1.1418, -1.1247, -1.1247,  ..., -1.4500, -1.4672, -1.4843]],
         [[-0.4601, -0.4426, -0.4426,  ...,  0.2577,  0.2577,  0.2402],
          [-0.3901, -0.3725, -0.3725,  ...,  0.2227,  0.2227,  0.2052],
          [-0.3200, -0.3200, -0.3200,  ...,  0.2052,  0.2052,  0.1702],
          ...,
          [-1.0903, -1.0728, -1.0553,  ..., -1.3179, -1.3354, -1.3529],
          [-1.0728, -1.0553, -1.0378,  ..., -1.1954, -1.1954, -1.2129],
          [-1.0378, -1.0203, -1.0203,  ..., -1.0553, -1.0728, -1.0903]],
         [[ 1.3677,  1.3677,  1.3677,  ...,  1.5942,  1.5942,  1.5768],
          [ 1.3502,  1.3502,  1.3502,  ...,  1.5942,  1.5768,  1.5594],
          [ 1.3502,  1.3502,  1.3328,  ...,  1.5768,  1.5768,  1.5420],
          ...,
          [-0.8807, -0.8633, -0.8458,  ..., -0.5844, -0.5844, -0.6018],
          [-0.8458, -0.8284, -0.8284,  ..., -0.3927, -0.3927, -0.4101],
          [-0.8284, -0.8110, -0.8110,  ..., -0.2010, -0.2010, -0.2184]]]]) tensor([4, 8, 9, 0, 2, 8, 7, 2, 2, 7, 4, 5, 1, 8, 1, 5, 6, 0, 3, 4, 3, 3, 2, 4,
        4, 9, 0, 1, 9, 5, 7, 2, 9, 7, 7, 0, 3, 6, 0, 0, 3, 1, 2, 2, 0, 3, 9, 0,
        2, 7, 0, 9, 5, 8, 7, 6, 6, 9, 8, 4, 5, 7, 2, 2, 7, 7, 2, 5, 8, 4, 1, 2,
        1, 9, 3, 3, 6, 9, 6, 3, 4, 6, 3, 7, 5, 5, 8, 3, 6, 9, 2, 1, 3, 0, 4, 0,
        4, 6, 1, 4, 6, 0, 2, 6, 2, 5, 8, 4, 3, 1, 2, 8, 6, 8, 3, 7, 5, 7, 9, 0,
        9, 3, 2, 5, 3, 5, 3, 2])
128 128 tensor([[[[-0.4226, -0.4054, -0.4054,  ...,  0.0227,  0.0227,  0.0227],
          [-0.3883, -0.3541, -0.3369,  ...,  0.0056,  0.0056,  0.0056],
          [-0.3369, -0.3027, -0.2856,  ..., -0.0116, -0.0116, -0.0116],
          ...,
          [ 0.0741,  0.0741,  0.0741,  ..., -1.5185, -1.5699, -1.6042],
          [ 0.0912,  0.0912,  0.0912,  ..., -1.4672, -1.5185, -1.5699],
          [ 0.0912,  0.1083,  0.1083,  ..., -1.4158, -1.4672, -1.5357]],
         [[-0.9853, -0.9678, -0.9678,  ..., -0.6352, -0.6352, -0.6352],
          [-0.9678, -0.9328, -0.9328,  ..., -0.6527, -0.6527, -0.6527],
          [-0.9328, -0.9153, -0.8978,  ..., -0.6527, -0.6527, -0.6702],
          ...,
          [-0.4426, -0.4426, -0.4426,  ..., -1.4930, -1.5280, -1.5805],
          [-0.4426, -0.4426, -0.4426,  ..., -1.4230, -1.4755, -1.5280],
          [-0.4251, -0.4251, -0.4251,  ..., -1.3704, -1.4230, -1.4755]],
         [[-1.2293, -1.2293, -1.2119,  ..., -1.0027, -1.0027, -1.0027],
          [-1.2119, -1.2119, -1.2119,  ..., -1.0201, -1.0201, -1.0201],
          [-1.2119, -1.1944, -1.1944,  ..., -1.0201, -1.0201, -1.0201],
          ...,
          [-0.7413, -0.7413, -0.7413,  ..., -1.2641, -1.2990, -1.3513],
          [-0.7413, -0.7413, -0.7413,  ..., -1.1944, -1.2467, -1.2990],
          [-0.7238, -0.7238, -0.7238,  ..., -1.1247, -1.1944, -1.2467]]],
        [[[ 2.1975,  2.1804,  2.1804,  ...,  2.0092,  1.9920,  1.9749],
          [ 2.2147,  2.1975,  2.1975,  ...,  1.9235,  1.9064,  1.8722],
          [ 2.2147,  2.2147,  2.2147,  ...,  1.8379,  1.8208,  1.7865],
          ...,
          [-1.0219, -1.0390, -1.0733,  ...,  0.0227,  0.0398,  0.0398],
          [-1.0219, -1.0390, -1.0733,  ...,  0.0227,  0.0398,  0.0398],
          [-1.0048, -1.0390, -1.0562,  ...,  0.0398,  0.0398,  0.0569]],
         [[ 2.3761,  2.3585,  2.3585,  ...,  2.2010,  2.2010,  2.1660],
          [ 2.3936,  2.3761,  2.3761,  ...,  2.1310,  2.1134,  2.0959],
          [ 2.3936,  2.3936,  2.3936,  ...,  2.0609,  2.0609,  2.0259],
          ...,
          [-0.9153, -0.9328, -0.9678,  ...,  0.1527,  0.1702,  0.1702],
          [-0.9153, -0.9328, -0.9678,  ...,  0.1527,  0.1702,  0.1702],
          [-0.8978, -0.9328, -0.9503,  ...,  0.1702,  0.1702,  0.1877]],
         [[ 2.6051,  2.5877,  2.5877,  ...,  2.3786,  2.3611,  2.3437],
          [ 2.6226,  2.6051,  2.6051,  ...,  2.2914,  2.2740,  2.2566],
          [ 2.6226,  2.6051,  2.6051,  ...,  2.2043,  2.1868,  2.1520],
          ...,
          [-0.7238, -0.7413, -0.7761,  ...,  0.3393,  0.3393,  0.3568],
          [-0.7238, -0.7413, -0.7761,  ...,  0.3393,  0.3393,  0.3568],
          [-0.7064, -0.7413, -0.7587,  ...,  0.3393,  0.3568,  0.3742]]],
        [[[-0.1999, -0.1143, -0.0287,  ..., -0.5596, -0.5767, -0.6109],
          [-0.2171, -0.1314, -0.0458,  ..., -0.5596, -0.5767, -0.5938],
          [-0.2171, -0.1486, -0.0629,  ..., -0.5596, -0.5767, -0.5938],
          ...,
          [-1.1075, -1.0733, -1.0048,  ..., -1.1932, -1.1418, -1.0733],
          [-1.1589, -1.1075, -1.0390,  ..., -1.2103, -1.1589, -1.1075],
          [-1.1932, -1.1418, -1.0733,  ..., -1.2445, -1.1932, -1.1247]],
         [[-0.1275, -0.0399,  0.0476,  ..., -0.5126, -0.5301, -0.5651],
          [-0.1450, -0.0574,  0.0301,  ..., -0.5126, -0.5301, -0.5476],
          [-0.1450, -0.0749,  0.0126,  ..., -0.5126, -0.5301, -0.5476],
          ...,
          [-0.8452, -0.7927, -0.7402,  ..., -0.8803, -0.8102, -0.7402],
          [-0.8803, -0.8277, -0.7752,  ..., -0.9153, -0.8452, -0.7927],
          [-0.8978, -0.8452, -0.7927,  ..., -0.9328, -0.8803, -0.8452]],
         [[ 0.0953,  0.1999,  0.3045,  ..., -0.4624, -0.4973, -0.5147],
          [ 0.0779,  0.1825,  0.2871,  ..., -0.4624, -0.4973, -0.5147],
          [ 0.0605,  0.1825,  0.2696,  ..., -0.4624, -0.4973, -0.5147],
          ...,
          [-0.0441, -0.0267,  0.0082,  ...,  0.1128,  0.1825,  0.2522],
          [-0.0441, -0.0267,  0.0082,  ...,  0.0779,  0.1302,  0.1999],
          [-0.0615, -0.0267,  0.0082,  ...,  0.0256,  0.0779,  0.1476]]],
        ...,
        [[[ 2.0263,  2.0092,  2.0092,  ...,  2.2489,  2.2489,  2.2489],
          [ 1.9749,  1.9578,  1.9578,  ...,  2.2489,  2.2489,  2.2489],
          [ 1.9235,  1.9064,  1.9064,  ...,  2.2489,  2.2489,  2.2489],
          ...,
          [-0.7479, -0.7650, -0.7650,  ...,  0.1597,  0.1597,  0.1597],
          [-0.7479, -0.7650, -0.7650,  ...,  0.1426,  0.1426,  0.1426],
          [-0.7479, -0.7650, -0.7650,  ...,  0.1426,  0.1426,  0.1254]],
         [[ 2.2360,  2.2360,  2.2360,  ...,  2.4286,  2.4286,  2.4286],
          [ 2.2185,  2.2185,  2.2185,  ...,  2.4286,  2.4286,  2.4286],
          [ 2.1835,  2.2010,  2.2010,  ...,  2.4286,  2.4286,  2.4286],
          ...,
          [-0.5126, -0.5301, -0.5301,  ...,  0.3102,  0.3102,  0.3102],
          [-0.5301, -0.5476, -0.5476,  ...,  0.2927,  0.2927,  0.2927],
          [-0.5476, -0.5651, -0.5651,  ...,  0.2927,  0.2752,  0.2752]],
         [[ 2.6226,  2.6226,  2.6226,  ...,  2.6400,  2.6400,  2.6400],
          [ 2.6051,  2.6051,  2.6051,  ...,  2.6400,  2.6400,  2.6400],
          [ 2.5877,  2.5877,  2.5877,  ...,  2.6400,  2.6400,  2.6400],
          ...,
          [-0.1835, -0.2010, -0.2010,  ...,  0.5834,  0.5834,  0.5659],
          [-0.2010, -0.2184, -0.2184,  ...,  0.5834,  0.5834,  0.5659],
          [-0.2184, -0.2358, -0.2358,  ...,  0.5659,  0.5659,  0.5659]]],
        [[[-1.3644, -1.3815, -1.4158,  ..., -0.1999, -0.3198, -0.4226],
          [-1.3302, -1.3302, -1.3302,  ..., -0.1657, -0.2856, -0.3883],
          [-1.2788, -1.2617, -1.2617,  ..., -0.1143, -0.2342, -0.3541],
          ...,
          [-0.7137, -0.7308, -0.7308,  ...,  0.0227,  0.0741,  0.1426],
          [-0.7308, -0.7308, -0.7308,  ...,  0.0741,  0.1426,  0.2111],
          [-0.7479, -0.7479, -0.7479,  ...,  0.1597,  0.2111,  0.2796]],
         [[-0.1975, -0.2325, -0.2850,  ...,  0.8354,  0.7304,  0.6254],
          [-0.1975, -0.2150, -0.2325,  ...,  0.8529,  0.7654,  0.6429],
          [-0.1800, -0.1800, -0.1800,  ...,  0.8880,  0.7829,  0.6604],
          ...,
          [-0.5826, -0.6001, -0.6001,  ...,  0.1527,  0.2052,  0.2752],
          [-0.5826, -0.6001, -0.6001,  ...,  0.2052,  0.2752,  0.3452],
          [-0.5826, -0.6001, -0.6001,  ...,  0.2927,  0.3452,  0.4153]],
         [[ 1.3677,  1.3328,  1.2980,  ...,  2.0125,  1.9951,  1.9777],
          [ 1.3502,  1.3328,  1.3154,  ...,  2.0125,  1.9951,  1.9603],
          [ 1.3502,  1.3328,  1.3154,  ...,  2.0125,  1.9777,  1.9428],
          ...,
          [-0.4101, -0.3927, -0.3927,  ...,  0.1128,  0.1825,  0.2522],
          [-0.4101, -0.3927, -0.3927,  ...,  0.1651,  0.2348,  0.3219],
          [-0.3927, -0.3927, -0.3927,  ...,  0.2348,  0.3045,  0.3916]]],
        [[[-1.0733, -1.0562, -1.0390,  ..., -0.7308, -0.6965, -0.6623],
          [-1.0562, -1.0390, -1.0048,  ..., -0.6965, -0.6794, -0.6452],
          [-1.0219, -1.0048, -0.9705,  ..., -0.6794, -0.6452, -0.6109],
          ...,
          [-0.5767, -0.5596, -0.5253,  ..., -0.7308, -0.6965, -0.6794],
          [-0.5767, -0.5424, -0.5253,  ..., -0.6965, -0.6794, -0.6623],
          [-0.5596, -0.5253, -0.5082,  ..., -0.6623, -0.6452, -0.6281]],
         [[-1.2129, -1.2129, -1.1954,  ..., -0.9503, -0.9153, -0.8803],
          [-1.1779, -1.1779, -1.1604,  ..., -0.9153, -0.8978, -0.8627],
          [-1.1604, -1.1429, -1.1253,  ..., -0.8978, -0.8627, -0.8277],
          ...,
          [-0.9678, -0.9328, -0.9153,  ..., -1.0553, -1.0378, -1.0203],
          [-0.9678, -0.9328, -0.9153,  ..., -1.0378, -1.0203, -1.0028],
          [-0.9678, -0.9328, -0.8978,  ..., -1.0203, -1.0028, -0.9853]],
         [[-0.7936, -0.8110, -0.8110,  ..., -0.6193, -0.5844, -0.5495],
          [-0.7761, -0.7761, -0.7761,  ..., -0.5844, -0.5670, -0.5321],
          [-0.7413, -0.7587, -0.7413,  ..., -0.5670, -0.5321, -0.4973],
          ...,
          [-0.6890, -0.6715, -0.6367,  ..., -0.8284, -0.8110, -0.7761],
          [-0.6890, -0.6715, -0.6367,  ..., -0.8110, -0.7936, -0.7761],
          [-0.7064, -0.6715, -0.6367,  ..., -0.7936, -0.7761, -0.7587]]]]) tensor([4, 9, 3, 0, 0, 9, 7, 0, 3, 3, 6, 4, 6, 2, 2, 8, 9, 5, 0, 5, 7, 7, 8, 1,
        0, 9, 1, 9, 7, 3, 9, 0, 4, 2, 8, 8, 0, 0, 0, 1, 9, 1, 2, 2, 3, 4, 3, 4,
        2, 2, 8, 0, 7, 4, 5, 3, 4, 5, 6, 6, 5, 4, 8, 0, 5, 2, 5, 1, 5, 7, 6, 9,
        6, 1, 6, 9, 8, 7, 2, 8, 4, 0, 4, 0, 8, 5, 6, 9, 3, 1, 7, 7, 6, 2, 5, 2,
        7, 5, 9, 1, 4, 4, 3, 9, 4, 9, 0, 4, 5, 0, 7, 6, 3, 5, 3, 5, 4, 0, 1, 2,
